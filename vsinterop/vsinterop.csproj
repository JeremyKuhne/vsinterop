<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <!--
      Because we're multitargeting, we need to specify SupportedPlatform to get proper platform compatibility warnings.
      https://learn.microsoft.com/dotnet/standard/analyzers/platform-compat-analyzer

      Including platform specific and non-platform specific target frameworks to allow use with a runtime check.
    -->
    <TargetFrameworks>$(DotNetCoreVersion)-$(WindowsPlatformVersion);$(DotNetCoreVersion);$(DotNetFrameworkVersion)</TargetFrameworks>
    <SupportedPlatform>$(WindowsPlatformVersion)</SupportedPlatform>

    <!-- Ignore checking for compatibilty when targetting .NET Core without the windows qualifier -->
    <NoWarn Condition="'$(TargetFramework)' == '$(DotNetCoreVersion)'">$(NoWarn);CA1416</NoWarn>

    <!--
      We don't want to have implicit usings as we're retargeting System.IO to Microsoft.IO
      in our GlobalUsings.cs file for .NET 4.7.2.
    -->
    <ImplicitUsings>disable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <LangVersion>latest</LangVersion>
    <RootNamespace />

    <!-- Not a security boundary, the strong name is for identity and ease of use from other signed assemblies. -->
    <SignAssembly>True</SignAssembly>
    <AssemblyOriginatorKeyFile>..\klutzyninja.snk</AssemblyOriginatorKeyFile>

    <!--
     Modifying default items to exclude the Framework items if not building for .NET Framework.
    -->
    <DefaultItemExcludes Condition="'$(TargetFramework)' != '$(DotNetFrameworkVersion)'">$(DefaultItemExcludes);**/Framework/**/*</DefaultItemExcludes>
  </PropertyGroup>

  <ItemGroup Condition="'$(TargetFramework)' != '$(DotNetFrameworkVersion)'">
    <!-- Include the Framework specific items as none so we can see them easily in the Solution Explorer. -->
    <None Include="**/Framework/**/*" />
  </ItemGroup>

  <ItemGroup>
    <Compile Remove="Framework\**" />
    <EmbeddedResource Remove="Framework\**" />
    <None Remove="Framework\**" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="KlutzyNinja.Madowaku" />
    <PackageReference Include="Microsoft.Windows.CsWin32">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <!--
    Pack (NuGet) related
  -->
  <PropertyGroup>
    <PackageId>KlutzyNinja.VisualStudioInterop</PackageId>
    <Description>Provides direct COM access for VS interfaces on .NET and .NET Framework.</Description>
    <Authors>Jeremy W. Kuhne</Authors>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageProjectUrl>https://github.com/JeremyKuhne/vsinterop</PackageProjectUrl>
    <RepositoryUrl>https://github.com/JeremyKuhne/vsinterop</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <Copyright>Copyright (c) Jeremy W. Kuhne. All rights reserved.</Copyright>
    <!-- Publish the repository URL in the built .nupkg (in the NuSpec <repository> element) -->
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
  </PropertyGroup>
  <ItemGroup>
    <None Include="../README.md" Pack="true" PackagePath="" />
  </ItemGroup>

  <!--
    SourceLink related
  -->
  <ItemGroup>
    <PackageReference Include="Microsoft.SourceLink.GitHub" PrivateAssets="All" />
  </ItemGroup>
  <PropertyGroup>
    <!-- Publish the repository URL in the built .nupkg (in the NuSpec <Repository> element) -->
    <PublishRepositoryUrl>true</PublishRepositoryUrl>

    <!-- Embed source files that are not tracked by the source control manager in the PDB -->
    <EmbedUntrackedSources>true</EmbedUntrackedSources>

    <!-- Embed symbols containing Source Link in the dll -->
    <DebugType>embedded</DebugType>

    <!-- To make source paths relative for the "official" builds -->
    <ContinuousIntegrationBuild Condition="'$(GITHUB_ACTIONS)' == 'true'">true</ContinuousIntegrationBuild>
  </PropertyGroup>

  <!--
    Versioning
  -->
  <PropertyGroup>
    <!-- Ensures that MinVer can find the tags we're using, which start with `v` -->
    <MinVerTagPrefix>v</MinVerTagPrefix>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="MinVer">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

</Project>
